generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode         = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  LearningWord  LearningWord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LearningWord {
  id              Int     @id @default(autoincrement())
  en              String
  ru              String
  category        String  @default("Общее")
  learned         Boolean @default(false)
  timeToTrain     Int     @db.UnsignedInt
  completedTrains Int     @default(0)
  image           String  @db.VarChar(512)
  user            User    @relation(fields: [userEmail], references: [email])
  userEmail       String

  @@index([userEmail])
}

model CollectionWord {
  id           Int        @id @default(autoincrement())
  en           String
  ru           String
  image        String     @db.VarChar(512)
  collection   Collection @relation(fields: [collectionId, category], references: [id, title])
  collectionId Int
  category     String

  @@index([collectionId, category])
}

model Collection {
  id    Int              @id @default(autoincrement())
  title String
  cover String           @db.VarChar(512)
  words CollectionWord[]

  @@unique([id, title])
}
